substitutions:
  devicename: szklarnia-esp32
  upper_devicename: Szklarnia
  friendly_name: Szklarnia
  key: !secret key_szklarnia-esp32
  ota: !secret ota_szklarnia-esp32
  IP: !secret IP_szklarnia-esp32
  fallback_pass: !secret fallback_pass_szklarnia-esp32
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ssid_ha: !secret wifi_ssid_ha
  wifi_password_ha: !secret wifi_password_ha
  log_level: DEBUG

#GPIO4 <---> GPIO12

#GPIO0 N/A 10k pull up 
#GPIO1 TX
#GPIO2 ONE-WIRE
#GPIO3 SENS2 RX
#GPIO4 COVER_ON_1 + LED #LIGHT
#GPIO5 CS
#GPIO6 N/A
#GPIO7 N/A
#GPIO8 N/A
#GPIO9 SENS1
#GPIO10 DIR_COVER_1
#GPIO11 N/A
#GPIO12 LIGHT #COVER_ON_1 + LED
#GPIO13 BUTTON
#GPIO14 COVER_ON_2
#GPIO15 SOUND
#GPIO16 DHT
#GPIO17 REMOTE_CLOSE
#GPIO18 CLK
#GPIO19 MISO
#GPIO20 NOT USED
#GPIO21 SDA 
#GPIO22 SCL
#GPIO23 MOSI
#GPIO24 N/A
#GPIO25 DIR_COVER_2
#GPIO26 CLOSE_SENS
#GPIO27 OPEN_SENS
#GPIO28 N/A
#GPIO29 N/A
#GPIO30 N/A
#GPIO31 N/A
#GPIO32 REMOTE_OPEN
#GPIO33 MOSI
#GPIO34 N/A
#GPIO35 N/A

# Enable logging
logger:
  #baud_rate: 0
  level: DEBUG

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  generic: !include common/generic.yaml
  esp32_only: !include common/esp32_only.yaml

sun:
  latitude: !secret lat
  longitude: !secret long

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: "Europe/Warsaw"

esp32:
  board: esp32dev
  framework:
    type: arduino

esphome:
  name: $devicename
  project:
    name: "jesse.leds_party"
    version: "1.0.0"
  on_boot:
    - lambda: |
              auto call = id(my_cover_1).make_call();
              call.set_command_close();
              call.perform();

#spi:
#  clk_pin: GPIO18
#  mosi_pin: GPIO23
#  miso_pin: GPIO19

#rc522_spi:
#  cs_pin: GPIO05

i2c:
  scl: 22
  sda: 21
  #frequency: 50000
  scan: true

dallas:
  - pin: 
      number: GPIO2
      mode: INPUT_PULLUP
    update_interval: 10s  

#rc522_i2c:
  # ...
#  address: 0x28
#  on_tag:
#    then:
#      - homeassistant.tag_scanned: !lambda 'return x;'  

binary_sensor:
#- platform: homeassistant
#  name: "switch garaz"
#  entity_id: switch.garaz
#  id: switch_garaz
- platform: gpio  #############################################
  pin:
    number: GPIO32    # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  name: ${upper_devicename} Satel Open button
  id: button_open_1
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_1).current_operation == COVER_OPERATION_IDLE)  
            {
               //id(my_cover_1).open();
                auto call = id(my_cover_1).make_call();
                call.set_command_open();
                call.perform();
            } 
          else 
            {
               //id(my_cover_1).stop();   // Cover is opening/closing. Stop it
                auto call = id(my_cover_1).make_call();
                call.set_command_stop();
                call.perform();
            }
- platform: gpio
  pin:
    number: GPIO17  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_close_1
  name: ${upper_devicename} Satel Close button
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_1).current_operation == COVER_OPERATION_IDLE)  
            {
               //id(my_cover_1).close();
                auto call = id(my_cover_1).make_call();
                call.set_command_close();
                call.perform();
            } 
          else 
            {
               //id(my_cover_1).stop();   // Cover is opening/closing. Stop it
                auto call = id(my_cover_1).make_call();
                call.set_command_stop();
                call.perform();
            }

- platform: gpio
  pin:
    number: GPIO13  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  name: ${upper_devicename} External button
  id: button_close_3
  on_click:
  - min_length: 50ms
    max_length: 500ms
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_1).current_operation == COVER_OPERATION_IDLE)  
            {
              //id(my_cover_1).close();
              auto call = id(my_cover_1).make_call();
              call.set_command_close();
              call.perform();
              //delay:
            } 
          else 
            {
              // id(my_cover_1).stop();   // Cover is opening/closing. Stop it
              auto call = id(my_cover_1).make_call();
              call.set_command_stop();
              call.perform();
            }  
  - min_length: 700ms
    max_length: 2000ms
    then:    
       # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_1).current_operation == COVER_OPERATION_IDLE)  
            {
               //id(my_cover_1).open();
                auto call = id(my_cover_1).make_call();
                call.set_command_open();
                call.perform();
            } 
          else 
            {
               //id(my_cover_1).stop();   // Cover is opening/closing. Stop it
                auto call = id(my_cover_1).make_call();
                call.set_command_stop();
                call.perform();
            }

- platform: gpio  #############################################
  name: ${upper_devicename} sens_1
  pin:
    number: GPIO9 # GPIO21    # ---
    mode: INPUT_PULLUP
    inverted: true
  id: sens_1
- platform: gpio  #############################################
  name: ${upper_devicename} sens_2
  pin:
    number: GPIO3 #GPIO23    # ---
    mode: INPUT_PULLUP
    inverted: true
  id: sens_2

switch:
- platform: gpio
  pin: GPIO4
  inverted: true
  id: light
- platform: gpio
  pin: GPIO15
  inverted: true
  id: sound
- platform: gpio #Front Door
  pin: GPIO12
  inverted: true
  id: on_cover_1
- platform: gpio #Front Door
  pin: GPIO10
  inverted: true
  id: dir_cover_1
- platform: gpio #Rear Door
  pin: GPIO14
  inverted: true
  id: on_cover_2
- platform: gpio #Rear Door
  pin: GPIO25
  inverted: true
  id: dir_cover_2
#output:
- platform: gpio  #############################################
  pin: GPIO27 # GPIO27    # ---
  inverted: true
  name: $friendly_name Satel Open Sens
  id: open_sens
- platform: gpio  #############################################
  pin: GPIO26 #GPIO26    # ---
  inverted: true
  id: close_sens
  name: $friendly_name Satel Close Sens

cover:
- platform: endstop
  name: ${upper_devicename} Cover
  id: my_cover_1
  max_duration: 240s
  open_action:
    - switch.turn_on: light
    - switch.turn_on: sound
    - switch.turn_off: on_cover_1
    - switch.turn_on: dir_cover_1
    - switch.turn_off: on_cover_2
    - switch.turn_on: dir_cover_2
    - switch.turn_on: open_sens
    - switch.turn_off: close_sens
  open_duration: 60s
  open_endstop: sens_1
  close_action:
    - switch.turn_on: light
    - switch.turn_on: sound
    - switch.turn_on: on_cover_1
    - switch.turn_off: dir_cover_1
    - switch.turn_on: on_cover_2
    - switch.turn_off: dir_cover_2
    - switch.turn_off: open_sens
    - switch.turn_on: close_sens
  close_duration: 60s
  close_endstop: sens_2
  stop_action:
    - switch.turn_off: light
    - switch.turn_off: sound
    - switch.turn_off: on_cover_1
    - switch.turn_off: dir_cover_1
    - switch.turn_off: on_cover_2
    - switch.turn_off: dir_cover_2

sensor:
  - platform: dallas
    address: 0x5000000055d4ff28
    name: ${upper_devicename} Temperatura
    id: szklarnia_temp
  - platform: dallas
    address: 0x51082253a6dee128
    name: ${upper_devicename} Temperatura External
    id: szklarnia_temp_ext
  - platform: bh1750
    name: ${upper_devicename} BH1750 Illuminance
    address: 0x23
    update_interval: 60s
  - platform: bmp085
    temperature:
      name: ${upper_devicename} Outside Temperature
    pressure:
      name: ${upper_devicename} Outside Pressure
    update_interval: 60s
  #- platform: dht
  #  pin: GPIO16
  #  temperature:
  #    name: ${upper_devicename} Temperature
  #  humidity:
  #    name: ${upper_devicename} Humidity
  #  update_interval: 60s

climate:
  - platform: thermostat
    icon: mdi:greenhouse
    visual:
      min_temperature: 10
      max_temperature: 32
      temperature_step:
        target_temperature: 0.5
        current_temperature: 0.1
    id: termostat
    name: ${upper_devicename} Termostat
    sensor: szklarnia_temp
    min_cooling_off_time: 1s
    min_cooling_run_time: 1s
    min_heating_off_time: 1s
    min_heating_run_time: 1s
    min_idle_time: 1s
    cool_action:
        - switch.turn_on: open_sens
        - switch.turn_off: close_sens
        - lambda: |

               //id(my_cover_1).open();
                auto call = id(my_cover_1).make_call();
                call.set_command_open();
                call.perform();
    heat_action:
        - switch.turn_off: open_sens
        - switch.turn_on: close_sens
        - lambda: |
              //id(my_cover_1).close();
              auto call = id(my_cover_1).make_call();
              call.set_command_close();
              call.perform();
              //delay:
    idle_action:
      - switch.turn_off: light
      - switch.turn_off: sound
    default_preset: Normaly
    preset:
      - name: Normaly
        default_target_temperature_low: 19 째C
        default_target_temperature_high: 26 째C
        mode: HEAT_COOL
      - name: Wietrzenie
        id: wietrzenie
        default_target_temperature_low: 10 째C
        default_target_temperature_high: 11 째C
        mode: HEAT_COOL
    preset_change:
        - logger.log: Preset has been changed! Checking Wietrzenie
        - if:
            condition:
              lambda: |-
                return id(termostat).custom_preset == "Wietrzenie";
            then:
              - logger.log: "**********************WIATRZENIE**************************"

interval:
  - interval: 60s
    then:
      - lambda: |-
          if (id(szklarnia_temp).state >= 37.0) 
          {      
                auto call = id(my_cover_1).make_call();
                call.set_command_open();
                call.perform();
          }
          if (id(szklarnia_temp).state <= 5.0)
          {
                auto call = id(my_cover_1).make_call();
                call.set_command_close();
                call.perform();
          }
  #- interval: 300s #7200s
  #  then:

#script:
#  - id: hallway_light_script
#    mode: restart     # Light will be kept on during 1 minute since
#                      # the latest time the script is executed
#    then:
#      - light.turn_on: hallway_light
#      - delay: 1 min
#      - light.turn_off: hallway_light


